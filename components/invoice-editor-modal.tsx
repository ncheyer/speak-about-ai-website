"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog"
import { Card, CardContent } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { useToast } from "@/hooks/use-toast"
import { 
  FileText, 
  Edit, 
  Save,
  Eye,
  Download,
  Loader2,
  CheckCircle,
  Clock,
  Users,
  DollarSign,
  Calendar,
  MapPin,
  Sparkles
} from "lucide-react"
import { generateDeliverablesFromProject, formatDeliverablesForStorage } from "@/lib/generate-deliverables"

interface InvoiceData {
  id: number
  invoice_number: string
  invoice_type?: 'deposit' | 'final' | 'standard'
  amount: number
  status: string
  due_date: string
  client_name?: string
  client_email?: string
  company?: string
  description?: string
  notes?: string
  
  // Project details
  project_id?: number
  event_name?: string
  event_date?: string
  event_location?: string
  speaker_name?: string
  program_topic?: string
  program_type?: string
  program_length?: number
  qa_length?: number
  audience_size?: number
  deliverables?: string
}

interface InvoiceEditorModalProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  invoiceId: number
  onSave?: () => void
  onViewPDF?: (invoiceId: number) => void
}

export function InvoiceEditorModal({
  open,
  onOpenChange,
  invoiceId,
  onSave,
  onViewPDF
}: InvoiceEditorModalProps) {
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [invoiceData, setInvoiceData] = useState<InvoiceData | null>(null)
  const [editedData, setEditedData] = useState<Partial<InvoiceData>>({})
  const [activeTab, setActiveTab] = useState("details")
  const { toast } = useToast()

  useEffect(() => {
    if (open && invoiceId) {
      fetchInvoiceData()
    }
  }, [open, invoiceId])

  const fetchInvoiceData = async () => {
    try {
      setLoading(true)
      
      // Fetch invoice with project details
      const response = await fetch(`/api/invoices/${invoiceId}/full`, {
        headers: {
          'x-dev-admin-bypass': 'dev-admin-access'
        }
      })

      if (response.ok) {
        const data = await response.json()
        setInvoiceData(data)
        setEditedData(data)
      } else {
        toast({
          title: "Error",
          description: "Failed to load invoice data",
          variant: "destructive"
        })
      }
    } catch (error) {
      console.error("Error fetching invoice:", error)
      toast({
        title: "Error",
        description: "Failed to load invoice data",
        variant: "destructive"
      })
    } finally {
      setLoading(false)
    }
  }

  const handleFieldChange = (field: string, value: any) => {
    setEditedData(prev => ({ ...prev, [field]: value }))
  }

  const handleAutoGenerateDeliverables = () => {
    if (editedData) {
      const generated = generateDeliverablesFromProject(editedData)
      const formatted = formatDeliverablesForStorage(generated)
      handleFieldChange('deliverables', formatted)
    }
  }

  const handleSave = async () => {
    try {
      setSaving(true)
      
      // Save edited data to invoice
      const response = await fetch(`/api/invoices/${invoiceId}/update-details`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'x-dev-admin-bypass': 'dev-admin-access'
        },
        body: JSON.stringify({
          description: editedData.description,
          notes: editedData.notes,
          // Save overrides as JSON in notes or separate field
          overrides: {
            event_name: editedData.event_name,
            speaker_name: editedData.speaker_name,
            program_topic: editedData.program_topic,
            program_type: editedData.program_type,
            program_length: editedData.program_length,
            qa_length: editedData.qa_length,
            audience_size: editedData.audience_size,
            deliverables: editedData.deliverables
          }
        })
      })

      if (response.ok) {
        toast({
          title: "Success",
          description: "Invoice details updated"
        })
        onSave?.()
        onOpenChange(false)
        
        // Open PDF viewer after save
        if (onViewPDF) {
          onViewPDF(invoiceId)
        }
      } else {
        throw new Error('Failed to save changes')
      }
    } catch (error) {
      console.error("Error saving invoice:", error)
      toast({
        title: "Error",
        description: "Failed to save changes",
        variant: "destructive"
      })
    } finally {
      setSaving(false)
    }
  }

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount)
  }

  if (loading) {
    return (
      <Dialog open={open} onOpenChange={onOpenChange}>
        <DialogContent className="max-w-3xl">
          <div className="flex items-center justify-center py-12">
            <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
          </div>
        </DialogContent>
      </Dialog>
    )
  }

  if (!invoiceData || !editedData) {
    return null
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Edit Invoice Details</DialogTitle>
          <DialogDescription>
            Review and edit invoice information before generating the PDF. Changes will be saved to this invoice.
          </DialogDescription>
        </DialogHeader>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="mt-4">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="details">Event Details</TabsTrigger>
            <TabsTrigger value="program">Program Info</TabsTrigger>
            <TabsTrigger value="deliverables">Deliverables</TabsTrigger>
          </TabsList>

          <TabsContent value="details" className="space-y-4 mt-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="event_name">Event Name</Label>
                <Input
                  id="event_name"
                  value={editedData.event_name || ''}
                  onChange={(e) => handleFieldChange('event_name', e.target.value)}
                  placeholder="Annual AI Conference"
                />
              </div>
              <div>
                <Label htmlFor="speaker_name">Speaker Name</Label>
                <Input
                  id="speaker_name"
                  value={editedData.speaker_name || ''}
                  onChange={(e) => handleFieldChange('speaker_name', e.target.value)}
                  placeholder="Speaker Name"
                />
              </div>
              <div>
                <Label htmlFor="event_location">Event Location</Label>
                <Input
                  id="event_location"
                  value={editedData.event_location || ''}
                  onChange={(e) => handleFieldChange('event_location', e.target.value)}
                  placeholder="City, State"
                />
              </div>
              <div>
                <Label htmlFor="event_date">Event Date</Label>
                <Input
                  id="event_date"
                  type="date"
                  value={editedData.event_date ? editedData.event_date.split('T')[0] : ''}
                  onChange={(e) => handleFieldChange('event_date', e.target.value)}
                />
              </div>
              <div>
                <Label htmlFor="client_name">Client Name</Label>
                <Input
                  id="client_name"
                  value={editedData.client_name || ''}
                  onChange={(e) => handleFieldChange('client_name', e.target.value)}
                />
              </div>
              <div>
                <Label htmlFor="company">Company</Label>
                <Input
                  id="company"
                  value={editedData.company || ''}
                  onChange={(e) => handleFieldChange('company', e.target.value)}
                />
              </div>
            </div>
          </TabsContent>

          <TabsContent value="program" className="space-y-4 mt-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="program_topic">Program Topic</Label>
                <Input
                  id="program_topic"
                  value={editedData.program_topic || ''}
                  onChange={(e) => handleFieldChange('program_topic', e.target.value)}
                  placeholder="AI and the Future of Work"
                />
              </div>
              <div>
                <Label htmlFor="program_type">Program Type</Label>
                <Input
                  id="program_type"
                  value={editedData.program_type || ''}
                  onChange={(e) => handleFieldChange('program_type', e.target.value)}
                  placeholder="Keynote Presentation"
                />
              </div>
              <div>
                <Label htmlFor="program_length">Program Length (minutes)</Label>
                <Input
                  id="program_length"
                  type="number"
                  value={editedData.program_length || ''}
                  onChange={(e) => handleFieldChange('program_length', parseInt(e.target.value) || 0)}
                  placeholder="60"
                />
              </div>
              <div>
                <Label htmlFor="qa_length">Q&A Length (minutes)</Label>
                <Input
                  id="qa_length"
                  type="number"
                  value={editedData.qa_length || ''}
                  onChange={(e) => handleFieldChange('qa_length', parseInt(e.target.value) || 0)}
                  placeholder="15"
                />
              </div>
              <div>
                <Label htmlFor="audience_size">Audience Size</Label>
                <Input
                  id="audience_size"
                  type="number"
                  value={editedData.audience_size || ''}
                  onChange={(e) => handleFieldChange('audience_size', parseInt(e.target.value) || 0)}
                  placeholder="500"
                />
              </div>
              <div>
                <Label htmlFor="amount">Invoice Amount</Label>
                <Input
                  id="amount"
                  type="number"
                  value={editedData.amount || ''}
                  onChange={(e) => handleFieldChange('amount', parseFloat(e.target.value) || 0)}
                  disabled
                  className="bg-gray-50"
                />
              </div>
            </div>
            
            <div>
              <Label htmlFor="description">Invoice Description</Label>
              <Textarea
                id="description"
                value={editedData.description || ''}
                onChange={(e) => handleFieldChange('description', e.target.value)}
                placeholder="Additional invoice description..."
                rows={3}
              />
            </div>
          </TabsContent>

          <TabsContent value="deliverables" className="space-y-4 mt-4">
            <div className="flex items-center justify-between mb-2">
              <Label htmlFor="deliverables">Deliverables</Label>
              <Button
                type="button"
                size="sm"
                variant="outline"
                onClick={handleAutoGenerateDeliverables}
              >
                <Sparkles className="h-4 w-4 mr-2" />
                Auto-Generate
              </Button>
            </div>
            <Textarea
              id="deliverables"
              value={editedData.deliverables || ''}
              onChange={(e) => handleFieldChange('deliverables', e.target.value)}
              placeholder="Enter each deliverable on a new line:
Pre-event consultation call (30 minutes)
60-minute keynote presentation
15-minute Q&A session
Presentation slides (PDF)"
              rows={10}
              className="font-mono text-sm"
            />
            
            {editedData.deliverables && (
              <Card className="bg-gray-50">
                <CardContent className="pt-4">
                  <Label className="mb-2 block">Preview:</Label>
                  <div className="space-y-1">
                    {editedData.deliverables.split('\n').filter(Boolean).map((item, index) => (
                      <div key={index} className="flex items-start gap-2">
                        <CheckCircle className="h-4 w-4 text-green-500 mt-0.5" />
                        <span className="text-sm">{item}</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}

            <div>
              <Label htmlFor="notes">Additional Notes</Label>
              <Textarea
                id="notes"
                value={editedData.notes || ''}
                onChange={(e) => handleFieldChange('notes', e.target.value)}
                placeholder="Any additional notes for this invoice..."
                rows={3}
              />
            </div>
          </TabsContent>
        </Tabs>

        <DialogFooter className="mt-6">
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
          <Button
            onClick={handleSave}
            disabled={saving}
          >
            {saving ? (
              <>
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                Saving...
              </>
            ) : (
              <>
                <Save className="h-4 w-4 mr-2" />
                Save & View PDF
              </>
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}